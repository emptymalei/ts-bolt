{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for ts_bolt \u00a4","title":"Home"},{"location":"#documentation-for-ts_bolt","text":"","title":"Documentation for ts_bolt"},{"location":"changelog/","text":"ts_bolt Changelog \u00a4 2023-01-01, 0.0.1 \u00a4 Init","title":"Changelog"},{"location":"changelog/#ts_bolt-changelog","text":"","title":"ts_bolt Changelog"},{"location":"changelog/#2023-01-01-001","text":"Init","title":"2023-01-01, 0.0.1"},{"location":"references/","text":"References \u00a4 In this section, we provide the references for the ts_bolt codebase.","title":"Introduction"},{"location":"references/#references","text":"In this section, we provide the references for the ts_bolt codebase.","title":"References"},{"location":"references/datamodules/gluonts/","text":"ts_bolt.datamodules.gluonts \u00a4 GluonTSDataLoaderConfig dataclass \u00a4 Configs for dataloaders from a gluonts dataset Parameters: Name Type Description Default batch_size int batch size for the PyTorch DataLoader required transform Optional [ Callable ] transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault. required collate_fn Optional [ Callable ] collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify required Source code in ts_bolt/datamodules/gluonts.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 @dataclass class GluonTSDataLoaderConfig : \"\"\"Configs for dataloaders from a gluonts dataset :param batch_size: batch size for the PyTorch DataLoader :param transform: transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault. :param collate_fn: collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify \"\"\" batch_size : int transform : Optional [ Callable ] collate_fn : Optional [ Callable ] def __post_init__ ( self ): if self . collate_fn is None : self . collate_fn = batchify GluonTSDataModule \u00a4 Bases: pl . LightningDataModule LightningDataModule from a gluonts dataset. Parameters: Name Type Description Default gluonts_dataset TrainDatasets gluonts TrainDatasets required train_dataloader_config GluonTSDataLoaderConfig config for train DataLoader required test_dataloader_config GluonTSDataLoaderConfig config for the test DataLoader required Source code in ts_bolt/datamodules/gluonts.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class GluonTSDataModule ( pl . LightningDataModule ): \"\"\"LightningDataModule from a gluonts dataset. :param gluonts_dataset: gluonts TrainDatasets :param train_dataloader_config: config for train DataLoader :param test_dataloader_config: config for the test DataLoader \"\"\" def __init__ ( self , gluonts_dataset : TrainDatasets , train_dataloader_config : GluonTSDataLoaderConfig , test_dataloader_config : GluonTSDataLoaderConfig , ): super () . __init__ () self . gluonts_dataset = gluonts_dataset self . train_dataloader_config = train_dataloader_config self . test_dataloader_config = test_dataloader_config def train_dataloader ( self ): return DataLoader ( dataset = GluonTSDataset ( gluonts_dataset = self . gluonts_dataset , is_train = True , transform = self . train_dataloader_config . transform , ), batch_size = self . train_dataloader_config . batch_size , collate_fn = self . train_dataloader_config . collate_fn , ) def test_dataloader ( self ): return DataLoader ( dataset = GluonTSDataset ( gluonts_dataset = self . gluonts_dataset , is_train = True , transform = self . test_dataloader_config . transform , ), batch_size = self . test_dataloader_config . batch_size , collate_fn = self . test_dataloader_config . collate_fn , ) GluonTSDataset \u00a4 Bases: Dataset A map stype dataset built from a gluonts dataset Parameters: Name Type Description Default gluonts_dataset TrainDatasets gluonts dataset, e.g., TrainDatasets required is_train bool whether the dataset is for training required transform Optional [ Callable ] transformations on dataset, e.g., gluonts.transform.InstanceSplitter None Source code in ts_bolt/datamodules/gluonts.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class GluonTSDataset ( Dataset ): \"\"\"A map stype dataset built from a gluonts dataset :param gluonts_dataset: gluonts dataset, e.g., TrainDatasets :param is_train: whether the dataset is for training :param transform: transformations on dataset, e.g., gluonts.transform.InstanceSplitter \"\"\" def __init__ ( self , gluonts_dataset : TrainDatasets , is_train : bool , transform : Optional [ Callable ] = None , ): self . metadata = gluonts_dataset . metadata self . data_length = len ( gluonts_dataset ) self . is_train = is_train if self . is_train : self . data = gluonts_dataset . train else : self . data = gluonts_dataset . test self . transform = transform self . transformed_dataset = self . _transform_dataset () self . length = len ( self . transformed_dataset ) def __getitem__ ( self , idx : int ) -> Dict [ str , Any ]: dataset = self . transformed_dataset return dataset [ idx ] def __len__ ( self ) -> int : return self . length def _transform_dataset ( self ) -> List [ Dict [ str , Any ]]: if self . transform : dataset = self . transform ( self . data , is_train = self . is_train ) else : dataset = self . data return list ( dataset ) GluonTSTransformsDefault \u00a4 Bases: Transformation Default transforms of a gluonts dataset gluonts_transform = GluonTSTransformsDefault ( context_length = 10 , prediction_length = 5 , ) Parameters: Name Type Description Default context_length int the length of history input required prediction_length int the length to be forecasted required Source code in ts_bolt/datamodules/gluonts.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class GluonTSTransformsDefault ( Transformation ): \"\"\"Default transforms of a gluonts dataset ```python gluonts_transform = GluonTSTransformsDefault( context_length=10, prediction_length=5, ) ``` :param context_length: the length of history input :param prediction_length: the length to be forecasted \"\"\" def __init__ ( self , context_length : int , prediction_length : int ): self . context_length = context_length self . prediction_length = prediction_length def __call__ ( self , data_it : Iterable [ Dict [ str , Any ]]): mask_unobserved = AddObservedValuesIndicator ( target_field = FieldName . TARGET , output_field = FieldName . OBSERVED_VALUES , ) training_splitter = InstanceSplitter ( target_field = FieldName . TARGET , is_pad_field = FieldName . IS_PAD , start_field = FieldName . START , forecast_start_field = FieldName . FORECAST_START , instance_sampler = ExpectedNumInstanceSampler ( num_instances = 1 , min_future = self . prediction_length , ), past_length = self . context_length , future_length = self . prediction_length , time_series_fields = [ FieldName . OBSERVED_VALUES ], ) return mask_unobserved + training_splitter","title":"GluonTS"},{"location":"references/datamodules/gluonts/#ts_boltdatamodulesgluonts","text":"","title":"ts_bolt.datamodules.gluonts"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataLoaderConfig","text":"Configs for dataloaders from a gluonts dataset Parameters: Name Type Description Default batch_size int batch size for the PyTorch DataLoader required transform Optional [ Callable ] transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault. required collate_fn Optional [ Callable ] collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify required Source code in ts_bolt/datamodules/gluonts.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 @dataclass class GluonTSDataLoaderConfig : \"\"\"Configs for dataloaders from a gluonts dataset :param batch_size: batch size for the PyTorch DataLoader :param transform: transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault. :param collate_fn: collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify \"\"\" batch_size : int transform : Optional [ Callable ] collate_fn : Optional [ Callable ] def __post_init__ ( self ): if self . collate_fn is None : self . collate_fn = batchify","title":"GluonTSDataLoaderConfig"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataModule","text":"Bases: pl . LightningDataModule LightningDataModule from a gluonts dataset. Parameters: Name Type Description Default gluonts_dataset TrainDatasets gluonts TrainDatasets required train_dataloader_config GluonTSDataLoaderConfig config for train DataLoader required test_dataloader_config GluonTSDataLoaderConfig config for the test DataLoader required Source code in ts_bolt/datamodules/gluonts.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class GluonTSDataModule ( pl . LightningDataModule ): \"\"\"LightningDataModule from a gluonts dataset. :param gluonts_dataset: gluonts TrainDatasets :param train_dataloader_config: config for train DataLoader :param test_dataloader_config: config for the test DataLoader \"\"\" def __init__ ( self , gluonts_dataset : TrainDatasets , train_dataloader_config : GluonTSDataLoaderConfig , test_dataloader_config : GluonTSDataLoaderConfig , ): super () . __init__ () self . gluonts_dataset = gluonts_dataset self . train_dataloader_config = train_dataloader_config self . test_dataloader_config = test_dataloader_config def train_dataloader ( self ): return DataLoader ( dataset = GluonTSDataset ( gluonts_dataset = self . gluonts_dataset , is_train = True , transform = self . train_dataloader_config . transform , ), batch_size = self . train_dataloader_config . batch_size , collate_fn = self . train_dataloader_config . collate_fn , ) def test_dataloader ( self ): return DataLoader ( dataset = GluonTSDataset ( gluonts_dataset = self . gluonts_dataset , is_train = True , transform = self . test_dataloader_config . transform , ), batch_size = self . test_dataloader_config . batch_size , collate_fn = self . test_dataloader_config . collate_fn , )","title":"GluonTSDataModule"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataset","text":"Bases: Dataset A map stype dataset built from a gluonts dataset Parameters: Name Type Description Default gluonts_dataset TrainDatasets gluonts dataset, e.g., TrainDatasets required is_train bool whether the dataset is for training required transform Optional [ Callable ] transformations on dataset, e.g., gluonts.transform.InstanceSplitter None Source code in ts_bolt/datamodules/gluonts.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class GluonTSDataset ( Dataset ): \"\"\"A map stype dataset built from a gluonts dataset :param gluonts_dataset: gluonts dataset, e.g., TrainDatasets :param is_train: whether the dataset is for training :param transform: transformations on dataset, e.g., gluonts.transform.InstanceSplitter \"\"\" def __init__ ( self , gluonts_dataset : TrainDatasets , is_train : bool , transform : Optional [ Callable ] = None , ): self . metadata = gluonts_dataset . metadata self . data_length = len ( gluonts_dataset ) self . is_train = is_train if self . is_train : self . data = gluonts_dataset . train else : self . data = gluonts_dataset . test self . transform = transform self . transformed_dataset = self . _transform_dataset () self . length = len ( self . transformed_dataset ) def __getitem__ ( self , idx : int ) -> Dict [ str , Any ]: dataset = self . transformed_dataset return dataset [ idx ] def __len__ ( self ) -> int : return self . length def _transform_dataset ( self ) -> List [ Dict [ str , Any ]]: if self . transform : dataset = self . transform ( self . data , is_train = self . is_train ) else : dataset = self . data return list ( dataset )","title":"GluonTSDataset"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSTransformsDefault","text":"Bases: Transformation Default transforms of a gluonts dataset gluonts_transform = GluonTSTransformsDefault ( context_length = 10 , prediction_length = 5 , ) Parameters: Name Type Description Default context_length int the length of history input required prediction_length int the length to be forecasted required Source code in ts_bolt/datamodules/gluonts.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class GluonTSTransformsDefault ( Transformation ): \"\"\"Default transforms of a gluonts dataset ```python gluonts_transform = GluonTSTransformsDefault( context_length=10, prediction_length=5, ) ``` :param context_length: the length of history input :param prediction_length: the length to be forecasted \"\"\" def __init__ ( self , context_length : int , prediction_length : int ): self . context_length = context_length self . prediction_length = prediction_length def __call__ ( self , data_it : Iterable [ Dict [ str , Any ]]): mask_unobserved = AddObservedValuesIndicator ( target_field = FieldName . TARGET , output_field = FieldName . OBSERVED_VALUES , ) training_splitter = InstanceSplitter ( target_field = FieldName . TARGET , is_pad_field = FieldName . IS_PAD , start_field = FieldName . START , forecast_start_field = FieldName . FORECAST_START , instance_sampler = ExpectedNumInstanceSampler ( num_instances = 1 , min_future = self . prediction_length , ), past_length = self . context_length , future_length = self . prediction_length , time_series_fields = [ FieldName . OBSERVED_VALUES ], ) return mask_unobserved + training_splitter","title":"GluonTSTransformsDefault"},{"location":"tutorials/","text":"Tutorials \u00a4 Tutorials for ts_bolt .","title":"Introduction"},{"location":"tutorials/#tutorials","text":"Tutorials for ts_bolt .","title":"Tutorials"}]}