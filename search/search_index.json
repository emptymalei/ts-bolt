{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for ts_bolt","text":""},{"location":"changelog/","title":"ts_bolt Changelog","text":""},{"location":"changelog/#2023-01-01-001","title":"2023-01-01, 0.0.1","text":"<p>Init</p>"},{"location":"references/","title":"Introduction","text":""},{"location":"references/#references","title":"References","text":"<p>In this section, we provide the references for the <code>ts_bolt</code> codebase.</p>"},{"location":"references/datamodules/gluonts/","title":"GluonTS","text":""},{"location":"references/datamodules/gluonts/#ts_boltdatamodulesgluonts","title":"ts_bolt.datamodules.gluonts","text":""},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataLoaderConfig","title":"<code>GluonTSDataLoaderConfig</code>  <code>dataclass</code>","text":"<p>Configs for dataloaders from a gluonts dataset</p> <pre><code>dl_config = GluonTSDataLoaderConfig(\n    batch_size=2,\n    transform=None,\n    collate_fn=None,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>batch size for the PyTorch DataLoader</p> required <code>transform</code> <code>Optional[Callable]</code> <p>transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault.</p> required <code>collate_fn</code> <code>Optional[Callable]</code> <p>collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify</p> required Source code in <code>ts_bolt/datamodules/gluonts.py</code> <pre><code>@dataclass\nclass GluonTSDataLoaderConfig:\n\"\"\"Configs for dataloaders from a gluonts dataset\n\n\n    ```python\n    dl_config = GluonTSDataLoaderConfig(\n        batch_size=2,\n        transform=None,\n        collate_fn=None,\n    )\n    ```\n\n    :param batch_size: batch size for the PyTorch DataLoader\n    :param transform: transforms of the PyTorch DataLoader, e.g., GluonTSTransformsDefault.\n    :param collate_fn: collate_fn of the PyTorch DataLoader, e.g., gluonts.torch.batchify.batchify\n    \"\"\"\n\n    batch_size: int\n    transform: Optional[Callable]\n    collate_fn: Optional[Callable]\n\n    def __post_init__(self):\n        if self.collate_fn is None:\n            self.collate_fn = batchify\n</code></pre>"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataModule","title":"<code>GluonTSDataModule</code>","text":"<p>         Bases: <code>pl.LightningDataModule</code></p> <p>LightningDataModule from a gluonts dataset.</p> <pre><code>from gluonts.dataset.repository.datasets import get_dataset\n\ngluonts_dataset = get_dataset(\"electricity\")\n\ntrain_dl_config = GluonTSDataLoaderConfig(\n    batch_size=2,\n    transform=None,\n    collate_fn=None,\n)\ntest_dl_config = GluonTSDataLoaderConfig(\n    batch_size=10,\n    transform=None,\n    collate_fn=None,\n)\n\ndm = GluonTSDataModule(\n    gluonts_dataset = gluonts_dataset,\n    train_dataloader_config = train_dl_config,\n    test_dataloader_config = test_dl_config,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>gluonts_dataset</code> <code>TrainDatasets</code> <p>gluonts TrainDatasets</p> required <code>train_dataloader_config</code> <code>GluonTSDataLoaderConfig</code> <p>config for train DataLoader</p> required <code>test_dataloader_config</code> <code>GluonTSDataLoaderConfig</code> <p>config for the test DataLoader</p> required Source code in <code>ts_bolt/datamodules/gluonts.py</code> <pre><code>class GluonTSDataModule(pl.LightningDataModule):\n\"\"\"LightningDataModule from a gluonts dataset.\n\n\n    ```python\n    from gluonts.dataset.repository.datasets import get_dataset\n\n    gluonts_dataset = get_dataset(\"electricity\")\n\n    train_dl_config = GluonTSDataLoaderConfig(\n        batch_size=2,\n        transform=None,\n        collate_fn=None,\n    )\n    test_dl_config = GluonTSDataLoaderConfig(\n        batch_size=10,\n        transform=None,\n        collate_fn=None,\n    )\n\n    dm = GluonTSDataModule(\n        gluonts_dataset = gluonts_dataset,\n        train_dataloader_config = train_dl_config,\n        test_dataloader_config = test_dl_config,\n    )\n    ```\n\n    :param gluonts_dataset: gluonts TrainDatasets\n    :param train_dataloader_config: config for train DataLoader\n    :param test_dataloader_config: config for the test DataLoader\n    \"\"\"\n\n    def __init__(\n        self,\n        gluonts_dataset: TrainDatasets,\n        train_dataloader_config: GluonTSDataLoaderConfig,\n        test_dataloader_config: GluonTSDataLoaderConfig,\n    ):\n        super().__init__()\n        self.gluonts_dataset = gluonts_dataset\n        self.train_dataloader_config = train_dataloader_config\n        self.test_dataloader_config = test_dataloader_config\n\n    def train_dataloader(self):\n        return DataLoader(\n            dataset=GluonTSDataset(\n                gluonts_dataset=self.gluonts_dataset,\n                is_train=True,\n                transform=self.train_dataloader_config.transform,\n            ),\n            batch_size=self.train_dataloader_config.batch_size,\n            collate_fn=self.train_dataloader_config.collate_fn,\n        )\n\n    def test_dataloader(self):\n        return DataLoader(\n            dataset=GluonTSDataset(\n                gluonts_dataset=self.gluonts_dataset,\n                is_train=True,\n                transform=self.test_dataloader_config.transform,\n            ),\n            batch_size=self.test_dataloader_config.batch_size,\n            collate_fn=self.test_dataloader_config.collate_fn,\n        )\n</code></pre>"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSDataset","title":"<code>GluonTSDataset</code>","text":"<p>         Bases: <code>Dataset</code></p> <p>A map stype dataset built from a gluonts dataset</p> <pre><code>from gluonts.dataset.repository.datasets import get_dataset\n\ngluonts_dataset = get_dataset(\"electricity\")\n\ndataset = GluonTSDataset(\n    gluonts_dataset = gluonts_dataset,\n    is_train = True\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>gluonts_dataset</code> <code>TrainDatasets</code> <p>gluonts dataset, e.g., TrainDatasets</p> required <code>is_train</code> <code>bool</code> <p>whether the dataset is for training</p> required <code>transform</code> <code>Optional[Callable]</code> <p>transformations on dataset, e.g., gluonts.transform.InstanceSplitter</p> <code>None</code> Source code in <code>ts_bolt/datamodules/gluonts.py</code> <pre><code>class GluonTSDataset(Dataset):\n\"\"\"A map stype dataset built from a gluonts dataset\n\n    ```python\n    from gluonts.dataset.repository.datasets import get_dataset\n\n    gluonts_dataset = get_dataset(\"electricity\")\n\n    dataset = GluonTSDataset(\n        gluonts_dataset = gluonts_dataset,\n        is_train = True\n    )\n    ```\n\n    :param gluonts_dataset: gluonts dataset, e.g., TrainDatasets\n    :param is_train: whether the dataset is for training\n    :param transform: transformations on dataset, e.g., gluonts.transform.InstanceSplitter\n    \"\"\"\n\n    def __init__(\n        self,\n        gluonts_dataset: TrainDatasets,\n        is_train: bool,\n        transform: Optional[Callable] = None,\n    ):\n        self.metadata = gluonts_dataset.metadata\n        self.data_length = len(gluonts_dataset)\n\n        self.is_train = is_train\n\n        if self.is_train:\n            self.data = gluonts_dataset.train\n        else:\n            self.data = gluonts_dataset.test\n\n        self.transform = transform\n        self.transformed_dataset = self._transform_dataset()\n        self.length = len(self.transformed_dataset)\n\n    def __getitem__(self, idx: int) -&gt; Dict[str, Any]:\n\n        dataset = self.transformed_dataset\n\n        return dataset[idx]\n\n    def __len__(self) -&gt; int:\n        return self.length\n\n    def _transform_dataset(self) -&gt; List[Dict[str, Any]]:\n\n        if self.transform:\n            dataset = self.transform(self.data, is_train=self.is_train)\n        else:\n            dataset = self.data\n\n        return list(dataset)\n</code></pre>"},{"location":"references/datamodules/gluonts/#ts_bolt.datamodules.gluonts.GluonTSTransformsDefault","title":"<code>GluonTSTransformsDefault</code>","text":"<p>         Bases: <code>Transformation</code></p> <p>Default transforms of a gluonts dataset</p> <pre><code>gluonts_transform = GluonTSTransformsDefault(\n    context_length=10,\n    prediction_length=5,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>context_length</code> <code>int</code> <p>the length of history input</p> required <code>prediction_length</code> <code>int</code> <p>the length to be forecasted</p> required Source code in <code>ts_bolt/datamodules/gluonts.py</code> <pre><code>class GluonTSTransformsDefault(Transformation):\n\"\"\"Default transforms of a gluonts dataset\n\n    ```python\n    gluonts_transform = GluonTSTransformsDefault(\n        context_length=10,\n        prediction_length=5,\n    )\n    ```\n\n    :param context_length: the length of history input\n    :param prediction_length: the length to be forecasted\n    \"\"\"\n\n    def __init__(self, context_length: int, prediction_length: int):\n        self.context_length = context_length\n        self.prediction_length = prediction_length\n\n    def __call__(self, data_it: Iterable[Dict[str, Any]]):\n        mask_unobserved = AddObservedValuesIndicator(\n            target_field=FieldName.TARGET,\n            output_field=FieldName.OBSERVED_VALUES,\n        )\n\n        training_splitter = InstanceSplitter(\n            target_field=FieldName.TARGET,\n            is_pad_field=FieldName.IS_PAD,\n            start_field=FieldName.START,\n            forecast_start_field=FieldName.FORECAST_START,\n            instance_sampler=ExpectedNumInstanceSampler(\n                num_instances=1,\n                min_future=self.prediction_length,\n            ),\n            past_length=self.context_length,\n            future_length=self.prediction_length,\n            time_series_fields=[FieldName.OBSERVED_VALUES],\n        )\n\n        return mask_unobserved + training_splitter\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Tutorials for <code>ts_bolt</code>.</p>"}]}